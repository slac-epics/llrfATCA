# CONFIG_SITE

# Make any application-specific changes to the EPICS build
#   configuration variables in this file.

# Host/target specific settings can be specified in files named
#   CONFIG_SITE.$(EPICS_HOST_ARCH).Common
#   CONFIG_SITE.Common.$(T_A)
#   CONFIG_SITE.$(EPICS_HOST_ARCH).$(T_A)

# CHECK_RELEASE controls the consistency checking of the support
#   applications pointed to by the RELEASE* files.
# Normally CHECK_RELEASE should be set to YES.
# Set CHECK_RELEASE to NO to disable checking completely.
# Set CHECK_RELEASE to WARN to perform consistency checking but
#   continue building even if conflicts are found.
CHECK_RELEASE = YES

# Set this when you only want to compile this application
#   for a subset of the cross-compiled target architectures
#   that Base is built for.
CROSS_COMPILER_TARGET_ARCHS = linuxRT-x86_64

# To install files into a location other than $(TOP) define
#   INSTALL_LOCATION here.
#INSTALL_LOCATION=</absolute/path/to/install/top>

# Define install location for protocol files
INSTALL_PROTO = $(INSTALL_LOCATION)/db

# Set this when the IOC and build host use different paths
#   to the install location. This may be needed to boot from
#   a Microsoft FTP server say, or on some NFS configurations.
#IOCS_APPL_TOP = </IOC's/absolute/path/to/install/top>

# =======================================================
# Let's install our IOC boot products:
# envPaths and st.cmd
# =======================================================
INSTALL_LOCATION_STARTUP += $(INSTALL_LOCATION)/startup
DIRECTORY_TARGETS += $(INSTALL_LOCATION_STARTUP)

## =============================
## Build Application Statically
## =============================
SHARED_LIBRARIES=NO
STATIC_BUILD=YES

# =================================
# Define the archiecture versions
# =================================
LINUX_KERNEL_MODULES=$(PACKAGE_SITE_TOP)/linuxKernel_Modules
LINUXRT_BUILDROOT_VERSION=buildroot-2019.08
LINUX_VERSION=rhel6

# =================================
# Common Platform Software Support
# =================================
HAVE_CPSW=YES
CPSW_FRAMEWORK_PACKAGE_NAME= cpsw/framework
CPSW_FRAMEWORK_VERSION      = R4.4.1
CPSW_FRAMEWORK_TOP          = $(PACKAGE_SITE_TOP)/$(CPSW_FRAMEWORK_PACKAGE_NAME)/$(CPSW_FRAMEWORK_VERSION)
CPSW_FRAMEWORK_LIB          = $(CPSW_FRAMEWORK_TOP)/$(PKG_ARCH)/lib
CPSW_FRAMEWORK_INCLUDE      = $(CPSW_FRAMEWORK_TOP)/$(PKG_ARCH)/include

CPSW_FWLOADER_PACKAGE_NAME  = cpsw/FirmwareLoader
CPSW_FWLOADER_VERSION       = R1.3.0
CPSW_FWLOADER_TOP           = $(PACKAGE_SITE_TOP)/$(CPSW_FWLOADER_PACKAGE_NAME)/$(CPSW_FWLOADER_VERSION)
CPSW_FWLOADER_BIN           = $(CPSW_FWLOADER_TOP)/$(PKG_ARCH)/bin

# ======================================
# Firmware Description via YAML library
# ======================================
YAML_PACKAGE_NAME = yaml-cpp
YAML_VERSION      = yaml-cpp-0.5.3_boost-1.64.0
YAML_TOP          = $(PACKAGE_SITE_TOP)/$(YAML_PACKAGE_NAME)/$(YAML_VERSION)
YAML_LIB          = $(YAML_TOP)/$(PKG_ARCH)/lib
YAML_INCLUDE       = $(YAML_TOP)/$(PKG_ARCH)/include

# ======================================
# Boost
# ======================================
BOOST_PACKAGE_NAME = boost
BOOST_VERSION      = 1.64.0
BOOST_TOP          = $(PACKAGE_SITE_TOP)/$(BOOST_PACKAGE_NAME)/$(BOOST_VERSION)
BOOST_LIB          = $(BOOST_TOP)/$(PKG_ARCH)/lib
BOOST_INCLUDE      = $(BOOST_TOP)/$(PKG_ARCH)/include

# ======================================
# High Performance Software TPR API
# ======================================
HPSTPR_PACKAGE_NAME = timing/hpsTpr
HPSTPR_VERSION      = R1.1.0
HPSTPR_TOP          = $(PACKAGE_SITE_TOP)/$(HPSTPR_PACKAGE_NAME)/$(HPSTPR_VERSION)
HPSTPR_LIB          = $(HPSTPR_TOP)/$(PKG_ARCH)/lib
HPSTPR_INCLUDE      = $(HPSTPR_TOP)/$(PKG_ARCH)/include

# ======================================
# BSA API
# ======================================
BSA_PACKAGE_NAME    = timing/bsa
BSA_VERSION         = R1.2.0
BSA_TOP             = $(PACKAGE_SITE_TOP)/$(BSA_PACKAGE_NAME)/$(BSA_VERSION)
BSA_LIB             = $(BSA_TOP)/$(PKG_ARCH)/lib
BSA_INCLUDE         = $(BSA_TOP)/$(PKG_ARCH)/include

# ======================================
# ATCA Common API
# ======================================
COMMONATCA_PACKAGE_NAME = atca/commonATCA
COMMONATCA_VERSION      = R1.3.0
COMMONATCA_TOP          = $(PACKAGE_SITE_TOP)/$(COMMONATCA_PACKAGE_NAME)/$(COMMONATCA_VERSION)
COMMONATCA_LIB          = $(COMMONATCA_TOP)/$(PKG_ARCH)/lib
COMMONATCA_INCLUDE      = $(COMMONATCA_TOP)/$(PKG_ARCH)/include

# ======================================
# RF Common API
# ======================================
COMMONRF_PACKAGE_NAME   = rf/commonRF
COMMONRF_VERSION        = R1.4.0
COMMONRF_TOP            = $(PACKAGE_SITE_TOP)/$(COMMONRF_PACKAGE_NAME)/$(COMMONRF_VERSION)
COMMONRF_LIB            = $(COMMONRF_TOP)/$(PKG_ARCH)/lib
COMMONRF_INCLUDE        = $(COMMONRF_TOP)/$(PKG_ARCH)/include

# ======================================
# LLRFHLS API
# ======================================
LLRFHLS_PACKAGE_NAME = rf/llrfHls
LLRFHLS_VERSION      = R4.2.1
LLRFHLS_TOP          = $(PACKAGE_SITE_TOP)/$(LLRFHLS_PACKAGE_NAME)/$(LLRFHLS_VERSION)
LLRFHLS_LIB          = $(LLRFHLS_TOP)/$(PKG_ARCH)/lib
LLRFHLS_INCLUDE      = $(LLRFHLS_TOP)/$(PKG_ARCH)/include

# ======================================
# LLRFAMC API 
# ======================================
LLRFAMC_PACKAGE_NAME = rf/llrfAmc
LLRFAMC_VERSION      = R1.0.0
LLRFAMC_TOP          = $(PACKAGE_SITE_TOP)/$(LLRFAMC_PACKAGE_NAME)/$(LLRFAMC_VERSION)
LLRFAMC_LIB          = $(LLRFAMC_TOP)/$(PKG_ARCH)/lib
LLRFAMC_INCLUDE      = $(LLRFAMC_TOP)/$(PKG_ARCH)/include

# ======================================
# Klystron Library API - Needed for LLRF Gen1
# ======================================
KLYSTRON_PACKAGE_NAME  = rf/KlystronLib
KLYSTRON_VERSION       = R1.3.0
KLYSTRON_TOP           = $(PACKAGE_SITE_TOP)/$(KLYSTRON_PACKAGE_NAME)/$(KLYSTRON_VERSION)
KLYSTRON_LIB           = $(KLYSTRON_TOP)/$(PKG_ARCH)/lib
KLYSTRON_INCLUDE       = $(KLYSTRON_TOP)/$(PKG_ARCH)/include

# ======================================
# YamlReader
# ======================================
YAMLREADER_PACKAGE_NAME = cpsw/yamlReader
YAMLREADER_VERSION      = R1.2.0
YAMLREADER_TOP          = $(PACKAGE_SITE_TOP)/$(YAMLREADER_PACKAGE_NAME)/$(YAMLREADER_VERSION)
YAMLREADER_LIB          = $(YAMLREADER_TOP)/$(PKG_ARCH)/lib
YAMLREADER_INCLUDE      = $(YAMLREADER_TOP)/$(PKG_ARCH)/include

# ======================================
# CPSW Device Library
# ======================================
DEVICELIB_PACKAGE_NAME = cpsw/deviceLibrary
DEVICELIB_VERSION      = R1.2.0
DEVICELIB_TOP          = $(PACKAGE_SITE_TOP)/$(DEVICELIB_PACKAGE_NAME)/$(DEVICELIB_VERSION)
DEVICELIB_LIB          = $(DEVICELIB_TOP)/$(PKG_ARCH)/lib
DEVICELIB_INCLUDE      = $(DEVICELIB_TOP)/$(PKG_ARCH)/include


# ========================================
# Support for MRF and SLAC based EVRs
# ========================================
# User Space Library and API:
EVRMA_PACKAGE_NAME=evrma
EVRMA_VERSION=R1.0.9
EVRMA_TOP=$(PACKAGE_SITE_TOP)/$(EVRMA_PACKAGE_NAME)/$(EVRMA_VERSION)
EVRMA_LIB=$(EVRMA_TOP)/$(PKG_ARCH)/lib
EVRMA_INCLUDE=$(EVRMA_TOP)/$(PKG_ARCH)/include

EVRMA_DRIVER_PACKAGE_NAME=evrmaDriver
EVRMA_DRIVER_VERSION=R1.0.9
EVRMA_DRIVER_TOP=$(LINUX_KERNEL_MODULES)/$(EVRMA_DRIVER_PACKAGE_NAME)/$(EVRMA_DRIVER_VERSION)
EVRMA_DRIVER_LIB=$(EVRMA_DRIVER_TOP)/$(PKG_ARCH)
EVRMA_DRIVER_INCLUDE=$(KERNEL_EVRMA_DRIVER_TOP)/src

# ======================================
# Support for Stream Devices
# ======================================
PCRE=YES
PCRE_PACKAGE_NAME=pcre
PCRE_VERSION=8.37
PCRE_TOP=$(PACKAGE_SITE_TOP)/$(PCRE_PACKAGE_NAME)/$(PCRE_VERSION)
PCRE_LIB=$(PCRE_TOP)/$(PKG_ARCH)/lib
PCRE_INCLUDE=$(PCRE_TOP)/$(PKG_ARCH)/include

# These allow developers to override the CONFIG_SITE variable
# settings without having to modify the configure/CONFIG_SITE
# file itself.
-include $(TOP)/../CONFIG_SITE.local
-include $(TOP)/configure/CONFIG_SITE.local

# End of file

